{"version":3,"sources":["serviceWorker.ts","store/features.tsx","components/ControlButtons.tsx","components/MapHandler.tsx","components/FeaturesTable.tsx","App.tsx","store/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","featuresSlice","createSlice","name","initialState","points","polylines","polygons","sampleMode","isTableDisplayed","reducers","addPoint","state","action","push","latlng","payload","id","uuid","addPolyline","latlngs","addPolygon","clearFeatures","toggleSampleMode","pop","toggleTable","actions","ControlButtons","dispatch","useDispatch","useSelector","store","Button","className","color","variant","onClick","initialPosition","lat","lng","MapHandler","onclick","e","center","zoom","TileLayer","url","map","point","Marker","position","key","Popup","polyline","Polyline","positions","polygon","Polygon","FeatureGroup","onCreated","layerType","layer","_latlng","_latlngs","draw","circle","circlemarker","rectangle","edit","remove","useStyles","makeStyles","table","minWidth","root","zIndex","bottom","height","FeaturesTable","classes","Slide","direction","in","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","row","scope","toString","App","configureStore","reducer","featuresReducer","middleware","getDefaultMiddleware","logger","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8325a54a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { LatLngLiteral, LatLngBoundsLiteral } from 'leaflet';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport interface Point {\r\n  latlng: LatLngLiteral,\r\n  id: string\r\n}\r\n\r\nexport interface Polyline {\r\n  latlngs: LatLngBoundsLiteral,\r\n  id: string\r\n}\r\n\r\nexport interface Polygon {\r\n  latlngs: LatLngBoundsLiteral,\r\n  id: string\r\n}\r\n\r\nexport interface FeaturesState {\r\n  points: Point[],\r\n  polylines: Polyline[],\r\n  polygons: Polygon[],\r\n  sampleMode: boolean,\r\n  isTableDisplayed: boolean\r\n}\r\n\r\nconst initialState: FeaturesState = {\r\n  points: [],\r\n  polylines: [],\r\n  polygons: [],\r\n  sampleMode: false,\r\n  isTableDisplayed: false\r\n};\r\n\r\nconst featuresSlice = createSlice({\r\n  name: 'features',\r\n  initialState,\r\n  reducers: {\r\n    addPoint(state, action: { payload: LatLngLiteral }) {\r\n      state.points.push({ latlng: action.payload, id: uuid() });\r\n    },\r\n    addPolyline(state, action: { payload: LatLngBoundsLiteral }) {\r\n      state.polylines.push({ latlngs: action.payload, id: uuid() });\r\n    },\r\n    addPolygon(state, action: { payload: LatLngBoundsLiteral }) {\r\n      state.polygons.push({ latlngs: action.payload, id: uuid() });\r\n    },\r\n    clearFeatures(state) {\r\n      state.points = [];\r\n      state.polylines = [];\r\n      state.polygons = [];\r\n    },\r\n    // Deprecated for now, replaced with leaflet-draw\r\n    toggleSampleMode(state) {\r\n      // The Map's onclick happens before the button's,\r\n      // so we'll remove the last added point which was added just behind the button\r\n      if (state.sampleMode) {\r\n        state.points.pop();\r\n      }\r\n      state.sampleMode = !state.sampleMode;\r\n    },\r\n    toggleTable(state) {\r\n      state.isTableDisplayed = !state.isTableDisplayed;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { addPoint, clearFeatures, toggleSampleMode, toggleTable, addPolygon, addPolyline } = featuresSlice.actions;\r\n\r\nexport default featuresSlice.reducer","import React from 'react';\r\nimport { clearFeatures, FeaturesState, toggleSampleMode, toggleTable } from \"../store/features\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nfunction ControlButtons() {\r\n  const dispatch = useDispatch();\r\n  const sampleMode = useSelector((store: FeaturesState) => store.sampleMode);\r\n  const isTableDisplayed = useSelector((store: FeaturesState) => store.isTableDisplayed);\r\n\r\n  function handleSampleToggle(e: any) {\r\n    e.preventDefault();\r\n    dispatch(toggleSampleMode());\r\n  }\r\n\r\n  function handleClear() {\r\n    dispatch(clearFeatures());\r\n  }\r\n\r\n  function handleToggleTable() {\r\n    dispatch(toggleTable());\r\n  }\r\n\r\n  // Deprecated for now, replaced with leaflet-draw\r\n  const sampleModeString = sampleMode ? 'on' : 'off';\r\n  const sampleModeButton = (\r\n    <Button color={sampleMode ? \"primary\" : 'secondary'} variant=\"contained\" onClick={handleSampleToggle}>\r\n      Sample points: {sampleModeString}\r\n    </Button>\r\n  );\r\n\r\n  return (\r\n    <div className=\"leaflet-control-container sample-button leaflet-right leaflet-top\">\r\n      <Button color=\"default\" variant=\"contained\" onClick={handleClear}>\r\n        Clear\r\n      </Button>\r\n      <Button color=\"primary\" variant=\"contained\" onClick={handleToggleTable}>\r\n        {isTableDisplayed ? 'Hide' : 'Show'} Table\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ControlButtons;","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer, Marker, Popup, FeatureGroup, Polygon, Polyline } from 'react-leaflet';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { LeafletMouseEvent } from 'leaflet';\r\n// @ts-ignore\r\nimport { EditControl } from 'react-leaflet-draw';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { addPoint, addPolyline, addPolygon, FeaturesState} from '../store/features';\r\nimport ControlButtons from \"./ControlButtons\";\r\n\r\nconst zoom = 8;\r\nconst initialPosition = {\r\n  lat: 31.639,\r\n  lng: 34.996\r\n};\r\n\r\nfunction MapHandler() {\r\n  const dispatch = useDispatch();\r\n  const points = useSelector((store: FeaturesState) => store.points);\r\n  const polylines = useSelector((store: FeaturesState) => store.polylines);\r\n  const polygons = useSelector((store: FeaturesState) => store.polygons);\r\n  const sampleMode = useSelector((store: FeaturesState) => store.sampleMode);\r\n\r\n  // Deprecated\r\n  function handleMapClick(e: LeafletMouseEvent) {\r\n    if (sampleMode) {\r\n      const { lat, lng } = e.latlng;\r\n      dispatch(addPoint({ lat, lng }));\r\n    }\r\n  }\r\n\r\n  function handleCreated(e: any) {\r\n    switch (e.layerType) {\r\n      case 'marker':\r\n        const { lat, lng } = e.layer._latlng;\r\n        dispatch(addPoint({ lat, lng }));\r\n        break;\r\n      case 'polyline':\r\n        dispatch(addPolyline([...e.layer._latlngs]));\r\n        break;\r\n      case 'polygon':\r\n        dispatch(addPolygon([...e.layer._latlngs]));\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <LeafletMap\r\n      onclick={handleMapClick}\r\n      center={initialPosition} zoom={zoom}\r\n    >\r\n      <TileLayer url='https://{s}.tile.osm.org/{z}/{x}/{y}.png'/>\r\n      {points.map(point => (\r\n        <Marker position={point.latlng} key={point.id}>\r\n          <Popup>\r\n            id: {point.id} <br/>\r\n            lat, lng: [{point.latlng.lat}, {point.latlng.lng}]\r\n          </Popup>\r\n        </Marker>\r\n      ))}\r\n      {polylines.map(polyline => (\r\n        <Polyline positions={polyline.latlngs} key={polyline.id}>\r\n          <Popup>id: {polyline.id}</Popup>\r\n        </Polyline>\r\n      ))}\r\n      {polygons.map(polygon => (\r\n        <Polygon positions={polygon.latlngs} key={polygon.id}>\r\n          <Popup>id: {polygon.id}</Popup>\r\n        </Polygon>\r\n      ))}\r\n      <FeatureGroup key={uuid()}>\r\n        <EditControl\r\n          position='topright'\r\n          onCreated={handleCreated}\r\n          draw={{\r\n            circle: false,\r\n            circlemarker: false,\r\n            rectangle: false,\r\n          }}\r\n          edit={{\r\n            edit: false,\r\n            remove: false\r\n          }}\r\n        />\r\n      </FeatureGroup>\r\n      <ControlButtons/>\r\n    </LeafletMap>\r\n  );\r\n}\r\n\r\nexport default MapHandler;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { Slide } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { FeaturesState, Point } from '../store/features';\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  root: {\r\n    zIndex: 1000,\r\n    position: 'fixed',\r\n    bottom: 0,\r\n    height: '35vh'\r\n  }\r\n});\r\n\r\nexport default function FeaturesTable() {\r\n  const classes = useStyles();\r\n  const points = useSelector((store: FeaturesState) => store.points);\r\n  const polylines = useSelector((store: FeaturesState) => store.polylines);\r\n  const polygons = useSelector((store: FeaturesState) => store.polygons);\r\n  const isTableDisplayed = useSelector((store: FeaturesState) => store.isTableDisplayed);\r\n\r\n  return (\r\n    <Slide direction=\"up\" in={isTableDisplayed}>\r\n      <TableContainer className={classes.root} component={Paper}>\r\n        <Table className={classes.table} aria-label=\"simple table\">\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell align=\"left\">ID</TableCell>\r\n              <TableCell align=\"right\">Layer Type</TableCell>\r\n              <TableCell align=\"right\">Latitude</TableCell>\r\n              <TableCell align=\"right\">Longitude</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {points.map((row: Point) => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell align=\"right\">Point</TableCell>\r\n                <TableCell align=\"right\">{row.latlng.lat}</TableCell>\r\n                <TableCell align=\"right\">{row.latlng.lng}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n            {polylines.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell align=\"right\">Polyline</TableCell>\r\n                <TableCell align=\"right\">{row.latlngs[0].toString()}</TableCell>\r\n                <TableCell align=\"right\">{row.latlngs[1].toString()}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n            {polygons.map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {row.id}\r\n                </TableCell>\r\n                <TableCell align=\"right\">Polygon</TableCell>\r\n                <TableCell align=\"right\">{row.latlngs[0][0].toString()}</TableCell>\r\n                <TableCell align=\"right\">{row.latlngs[0][1].toString()}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Slide>\r\n  );\r\n}","import React from 'react';\nimport MapHandler from './components/MapHandler';\nimport FeaturesTable from './components/FeaturesTable';\n\nfunction App() {\n  return (\n    <>\n      <MapHandler/> \n      <FeaturesTable/>\n    </>\n  );\n}\n\nexport default App;\n","import { configureStore, getDefaultMiddleware, Middleware } from \"@reduxjs/toolkit\";\r\nimport { logger } from 'redux-logger';\r\nimport featuresReducer from './features';\r\n\r\ntype RootState = ReturnType<typeof featuresReducer>\r\n\r\nexport default configureStore({ \r\n  reducer: featuresReducer,\r\n  middleware: [...getDefaultMiddleware<RootState>(), logger as Middleware]\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}